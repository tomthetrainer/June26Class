# Using DataVec to ingest a CSV dataset 

In this lab you will import data from a CSV file into a format suitable for a Neural Network. 

## Goals of this lab

* DataVec Introduction


# Step 1

* Open up IntelliJ
Open up IntelliJ and navigate to the Labs folder

# Step 2

* Open the Iris DataVec class

Click on IrisDataVec.java to open up the java class in the editor

# Step 3

* Review the Java Code

In this case the Neural Network has already been built. The goal of this Lab is to work through the Data ETL process using DataVec. 

* Understand the Challenge

The Iris.txt file has 150 records of measurements of 3 Irises. Iris Setosa, Iris Virginica, Iris versicolor. Measurements are Petal Length, Petal Width,Sepal Length, Sepal Width. 

The data is stored with numeric representation of the species, 0=> Setosa, 1 => Versicolor,2=> Virginica


```
5.1,3.5,1.4,0.2,0
7.0,3.2,4.7,1.4,1
7.2,3.2,6.0,1.8,2
```



# STEP 3

Review the needed steps. 

1. Read the File
2. Parse the Lines
3. Specify Label fields vs measurment
4. Create a DataSet object to pass into our Nerual Network. 

DataVec Classes that will be used. 

https://deeplearning4j.org/datavecdoc/org/datavec/api/records/reader/RecordReader.html
https://deeplearning4j.org/datavecdoc/org/datavec/api/records/reader/impl/csv/CSVRecordReader.html

DeepLearning4J class that will be used

https://deeplearning4j.org/doc/org/deeplearning4j/datasets/datavec/RecordReaderDataSetIterator.html

Full DataVec JavaDoc
https://deeplearning4j.org/datavecdoc/

Full DeepLEarning4J JavaDoc.
https://deeplearning4j.org/doc/


Advanced users are welcome at this point to open up the stub and go for it. 

Everyone else please follow along with the instructions


### STEP 3 Set some parameters

CSVRecordReader is designed to be able to ignore the first x number of lines in a file. The assumption is the file may have header information or comments. 

Take a look at Iris.txt and confirm that it has no headers. 

CSVRecordReader is configurable in terms of how the data records are delimited. Verify that the file is comma delimeted. 

** Note bad data is a frequent problem, in this clean sterilized lab environment you can trust the data, in real world I always run some verication scripts to verify every line has the same amount of commas, at the very least. 


After verifying that there are no header lines, and the delimiter is a comma, add the following code to the stub program. 

        int numLinesToSkip = 0;
        String delimiter = ",";
    


## Create a RecordReader 

Add this line to the code stub

RecordReader recordReader = new CSVRecordReader(numLinesToSkip,delimiter);![alt text](../resources/Run_class.png)

## Initialize the RecordReader and pass it a file. 

For portability the file is put in the resources folder. This makes it available as a ClassPathResource. If you chose to get the path to the file and use that instead that is fine. 

```new ClassPathResource(fileName).getFile()``` 
access a file on the ClassPath 

A record Reader is initialized and passed a FileSplit. 

A FileSplit can point to a directory and the Record Reader can read all the files in the directory, or in this case it will point to a single file. 

recordReader.initialize(new FileSplit(new ClassPathResource("iris.txt").getFile()));



## Optional Step

Verify the Record Reader. 

You may want to verify the the Record Reader code is functional. 

The Record Reader returns an Iterator over a set of Records. 

Each call to next method returns an java.util.ArrayList of values. 


Some code to explore that would be. 

while( recordReader.hasNext()) {
            log.info(recordReader.next().toString());
            log.info(recordReader.next().getClass().toString());
        }
        recordReader.reset();




##  Create a DataSet Iterator

```
DataSetIterator iterator = new RecordReaderDataSetIterator(recordReader,batchSize,labelIndex,numClasses);
DataSet allData = iterator.next();
```

## Shuffle the Data

allData.shuffle();

## Split Train and Test


        SplitTestAndTrain testAndTrain = allData.splitTestAndTrain(0.65);  //Use 65% of data for training

        DataSet trainingData = testAndTrain.getTrain();
        DataSet testData = testAndTrain.getTest();


## Extra Credit

Normalize the DataSet


## Extra Credit

Parent Path Label Generator



