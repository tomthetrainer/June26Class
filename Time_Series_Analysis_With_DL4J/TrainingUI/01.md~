!SLIDE center subsection

# DeepLearning4J Training UI


!SLIDE

# Visualizing Network Training with the Deeplearning4j Training UI

* Browser Based
* Real Time


!SLIDE

# Using the Training UI

* Add Dependency to Pom.xml
* Add code to your class

!SLIDE

# pom.xml

	<dependency>
        <groupId>org.deeplearning4j</groupId>
        <artifactId>deeplearning4j-ui_2.10</artifactId>
        <version>${dl4j.version}</version>
    </dependency>

!SLIDE

# Code for UI

	//Initialize the user interface backend
	UIServer uiServer = UIServer.getInstance();


	//Configure where the network information 
	//(gradients, score vs. time etc) is to be stored. 
	//Here: store in memory.
    StatsStorage statsStorage = new InMemoryStatsStorage();         
	//Alternative: new FileStatsStorage(File), for saving and loading later
    
    //Attach the StatsStorage instance to the UI: 
	//this allows the contents of the StatsStorage to be visualized
    uiServer.attach(statsStorage);

    //Then add the StatsListener 
	//to collect this information from the network, as it trains
    net.setListeners(new StatsListener(statsStorage));


!SLIDE

# Viewing the UI

* http://localhost:9000/train


!SLIDE

# Configuring the UI

* System Property org.deeplearning4j.ui.port 
* Switch Port

		-Dorg.deeplearning4j.ui.port=9001
		
		
!SLIDE 

# UI execution

### Information will then be collected and routed to the UI when you call the fit method on your network.

!SLIDE

# Code Example

https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-examples/src/main/java/org/deeplearning4j/examples/userInterface/UIExample.java


!SLIDE

# Overview Page

<img src="../../resources/DL4J_UI_01.png">


!SLIDE

# Using the Overview Page

* Top left: score vs iteration chart - this is the value of the loss function on the current minibatch
* Top right: model and training information
* Bottom left: Ratio of parameters to updates (by layer) for all network weights vs. iteration
* Bottom right: Standard deviations (vs. time) of: activations, gradients and updates

!SLIDE

# Model Page

<img src="../../resources/DL4J_UI_02.png">


!SLIDE

# Model Page

* On the right, the following charts are available, after selecting a layer:
  * Table of layer information
  * Update to parameter ratio for this layer, as per the overview page. The components of this ratio (the parameter and update mean magnitudes) are also available via tabs.
  * Layer activations (mean and mean +/- 2 standard deviations) over time
  * Histograms of parameters and updates, for each parameter type
  * Learning rate vs. time (note this will be flat, unless learning rate schedules are used)


~~~SECTION:notes~~~

Note: parameters are labeled as follows: weights (W) and biases (b). For recurrent neural networks, W refers to the weights connecting the layer to the layer below, and RW refers to the recurrent weights (i.e., those between time steps).

~~~ENDSECTION~~~


!SLIDE

# Deeplearning4J UI and Spark Training

* Conflict with Spark Dependencies
  * Collect and save the relevant stats, to be visualized (offline) at a later point
  * Run the UI in a separate server, and Use the remote UI functionality to upload the data from the Spark master to your UI instance
  
  
  
!SLIDE

# Offline Use

* Collecting Stats

	SparkDl4jMultiLayer sparkNet = new SparkDl4jMultiLayer(sc, conf, tm);
    
    StatsStorage ss = new FileStatsStorage(new File("myNetworkTrainingStats.dl4j"));
    sparkNet.setListeners(ss, Collections.singletonList(new StatsListener(null)));

* Load for Later use


	StatsStorage statsStorage = new FileStatsStorage(statsFile);    
	//If file already exists: load the data from it
    UIServer uiServer = UIServer.getInstance();
    uiServer.attach(statsStorage);
	
	
	
!SLIDE

# Remote UI

* In JVM running the UI:

	UIServer uiServer = UIServer.getInstance();
    uiServer.enableRemoteListener();        
	//Necessary: remote support is not enabled by default
	
* In the Spark Training instance:

	SparkDl4jMultiLayer sparkNet = new SparkDl4jMultiLayer(sc, conf, tm);
	StatsStorageRouter remoteUIRouter = 
	new RemoteUIStatsStorageRouter("http://UI_MACHINE_IP:9000");
    sparkNet.setListeners(remoteUIRouter, 
	Collections.singletonList(new StatsListener(null)));

!SLIDE

# Using UI to Tune Your Network

~~~SECTION:notes~~~

The score vs. iteration should (overall) go down over time.

If the score increases consistently, your learning rate is likely set too high. Try reducing it until scores become more stable.
Increasing scores can also be indicative of other network issues, such as incorrect data normalization
If the score is flat or decreases very slowly (over a few hundred iteratons) (a) your learning rate may be too low, or (b) you might be having diffulties with optimization. In the latter case, if you are using the SGD updater, try a different updater such as Nesterovs (momentum), RMSProp or Adagrad.
Note that data that isn’t shuffled (i.e., each minibatch contains only one class, for classification) can result in very rough or abnormal-looking score vs. iteration graphs
Some noise in this line chart is expected (i.e., the line will go up and down within a small range). However, if the scores vary quite significantly between runs variation is very large, this can be a problem
The issues mentioned above (learning rate, normalization, data shuffling) may contribute to this.
Setting the minibatch size to a very small number of examples can also contribute to noisy score vs. iteration graphs, and might lead to optimization difficulties
Overview Page and Model Page - Using the Update:Parameter Ratio Chart

The ratio of mean magnitude of parameters to updates is provided on both the overview and model pages
“Mean magnitude” = the average of the absolute value of the parameters or updates at the current time step
The most important use of this ratio is in selecting a learning rate. As a rule of thumb: this ratio should be around 1:1000 = 0.001. On the (log10) chart, this corresponds to a value of -3 (i.e., 10-3 = 0.001)
Note that is a rough guide only, and may not be appropriate for all networks. It’s often a good starting point, however.
If the ratio diverges significantly from this (for example, > -2 (i.e., 10-2=0.01) or < -4 (i.e., 10-4=0.0001), your parameters may be too unstable to learn useful features, or may change too slowly to learn useful features
To change this ratio, adjust your learning rate (or sometimes, parameter initialization). In some networks, you may need to set the learning rate differently for different layers.
Keep an eye out for unusually large spikes in the ratio: this may indicate exploding gradients
Model Page: Layer Activations (vs. Time) Chart

This chart can be used to detect vanishing or exploding activations (due to poor weight initialization, too much regularization, lack of data normalization, or too high a learning rate).

This chart should ideally stabilize over time (usually a few hundred iterations)
A good standard deviation for the activations is on the order of 0.5 to 2.0. Significantly outside of this range may indicate one of the problems mentioned above.
Model Page: Layer Parameters Histogram

The layer parameters histogram is displayed for the most recent iteration only.

For weights, these histograms should have an approximately Gaussian (normal) distribution, after some time
For biases, these histograms will generally start at 0, and will usually end up being approximately Gaussian
One exception to this is for LSTM recurrent neural network layers: by default, the biases for one gate (the forget gate) are set to 1.0 (by default, though this is configurable), to help in learning dependencies across long time periods. This results in the bias graphs initially having many biases around 0.0, with another set of biases around 1.0
Keep an eye out for parameters that are diverging to +/- infinity: this may be due to too high a learning rate, or insufficient regularization (try adding some L2 regularization to your network).
Keep an eye out for biases that become very large. This can sometimes occur in the output layer for classification, if the distribution of classes is very imbalanced
Model Page: Layer Updates Histogram

The layer update histogram is displayed for the most recent iteration only.

Note that these are the updates - i.e., the gradients after appling learning rate, momentum, regularization etc
As with the parameter graphs, these should have an approximately Gaussian (normal) distribution
Keep an eye out for very large values: this can indicate exploding gradients in your network
Exploding gradients are problematic as they can ‘mess up’ the parameters of your network
In this case, it may indicate a weight initialization, learning rate or input/labels data normalization issue
In the case of recurrent neural networks, adding some gradient normalization or gradient clipping may help
Model Page: Parameter Learning Rates Chart

This chart simply shows the learning rates of the parameters of selected layer, over time.

If you are not using learning rate schedules, the chart will be flat. If you are using learning rate schedules, you can use this chart to track the current value of the learning rate (for each parameter), over time.

~~~ENDSECTION~~~
